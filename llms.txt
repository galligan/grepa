# Grepa (grep-anchor)

> Grepa provides a universal pattern (`:A:`) that makes codebases AI-navigable and grep-friendly. Drop tiny, searchable markers in comments so AI agents and developers can instantly navigate to the right spot in any codebase.

## Core Concept

Magic Anchors are unique, searchable markers placed in code comments using the pattern `:A: payload`. The canonical anchor is `:A:` (colon-A-colon followed by exactly one space). The payload consists of markers that classify the code location.

Key principles:
- **One anchor per project** - Maintain consistency across your codebase
- **Tags, not prose** - Use structured tags for reliable pattern matching
- **Keep tags terse** - Prefer `sec` over `security`, `ctx` over `context`
- **Progressive adoption** - Start with one tag, expand as needed
- **AI-first design** - Optimized for LLM navigation and understanding

## Essential Patterns

### Basic Usage
```javascript
// :A: todo implement validation
// :A: sec check user permissions
// :A: ctx assumes UTC timestamps
// :A: @agent write unit tests
// :A: temp remove after v2.0
```

### Combined Markers (use judiciously)
```python
# :A: sec, todo validate inputs  # Good: related concerns, concise
# :A: perf, debt refactor this loop   # Good: both about code quality
```

### Separate Comments (often better)
```python
# :A: sec check SQL injection vulnerabilities
# :A: todo add input validation for email format
# :A: ctx user emails must be unique in database
# Better: each concern gets proper description
```

### Searching
```bash
rg ":A:"              # All anchors
rg ":A: sec"          # Security concerns
rg ":A:.*@agent"      # AI tasks

# Context searching (find related markers)
rg -B1 -A1 ":A: sec"      # Show 1 line before/after
rg -C2 ":A: todo"          # Show 2 lines context
rg -B2 -A2 ":A: sec"
```

## Marker Reference

**Core Markers:**
- `tldr` - Brief summary or overview ("Too Long; Didn't Read")
- `todo` - Work that needs doing
- `ctx` - Important context/assumptions
- `sec` - Security-critical code
- `@agent` - AI agent instructions
- `tmp` - Temporary code to remove

**Quality Markers:**
- `perf` - Performance concerns
- `bug` - Known issues
- `debt` - Technical debt
- `fix` / `fixme` - Broken code needing immediate fix
- `error` - Error handling needed
- `test` - Testing requirements
- `breaking` - Breaking API changes
- `freeze` - Code that must not be modified
- `review` - Needs human review
- `config` - Configuration values

**Risk & Severity:**
- `warn` / `warning` - Potential issues or gotchas
- `crit` / `critical` - Critical code paths
- `unsafe` - Dangerous operations
- `danger` - Extremely risky code

**Documentation:**
- `api` - Public interfaces
- `docs` - Documentation needed  
- `example` - Usage examples
- `business` - Business logic
- `meta` - Metadata about files/scripts
- `tldr` - Brief summary (often in HTML comments)
- `core` - Core concepts
- `guide` - How-to guides
- `spec` - Specifications

**Management:**
- `issue(ID)` - Link to issue tracker
- `owner(@person)` - Assign responsibility
- `priority` - Priority level (p0, p1, etc.)
- `deadline(date)` - Time constraints

## Why `:A:`?

The canonical anchor `:A:` was chosen for:
- **Brevity**: Just 3 characters
- **Uniqueness**: Unlikely to conflict with existing code
- **Mnemonic**: "Anchor" for navigation
- **Consistency**: One standard across all projects

## AI Agent Workflows

### 1. Human marks location
```python
class UserService:
    # :A: ctx all emails must be unique
    def create_user(self, email: str):
        # :A: @agent implement with validation
        # :A: sec prevent duplicates
        pass
```

### 2. AI finds work
```bash
rg ":A:.*@agent"
# user_service.py:4: # :A: @agent implement with validation
```

### 3. AI reads context
```bash
rg ":A: ctx|:A: sec" user_service.py
# user_service.py:2: # :A: ctx all emails must be unique
# user_service.py:5: # :A: sec prevent duplicates
```

### 4. AI implements with understanding

## Migration Strategies

### From TODO comments
```bash
# Phase 1: Enhance existing
sed -i 's/TODO:/TODO :A: /g' **/*.js

# Phase 2: Pure anchors
sed -i 's/TODO :A: /:A: todo /g' **/*.js
```

### Progressive adoption
1. Start with `:A: todo`
2. Add `:A: ctx` for clarity
3. Use `:A: @agent` for AI
4. Link with `:A: issue(123)`

## Monorepo Patterns

Use markers for service namespacing:
```javascript
// :A: auth, todo implement OAuth
// :A: payment, sec validate amounts
// :A: shared, api maintain compatibility
```

Search patterns:
```bash
rg ":A: auth"          # Auth service only
rg ":A:.*sec"         # All security issues
```

## Advanced Patterns

### Parameter Syntax
```javascript
// :A: issue(123) deadline(2024-03-01)
// :A: owner(@alice) priority(high)
```

### Multiple Values
```javascript
// :A: blocked:[123,456] owners:[@alice,@bob]
```

### Issue Linking
```python
# :A: issue(123)
# :A: jira(PROJ-456)
# :A: github(#789)
```

### HTML Comments (for markdown)
```markdown
<!-- :A: tldr Quick summary of the document -->
<!-- :A: core Essential concept explanation -->
<!-- :A: guide Step-by-step instructions -->
```

## Best Practices

1. **Separate concerns**: Use multiple comments for distinct topics
2. **Line limits**: Keep under ~80 chars for readable grep output
3. **Layer markers carefully**: `:A: sec, todo` only when closely related
4. **Add context liberally**: More context is better, use separate lines
5. **Be specific**: "validate UUID" not just "validate"
6. **Link resources**: `:A: docs(RFC-7231)`
7. **Stay consistent**: Document team patterns
8. **Use HTML comments in markdown**: `<!-- :A: tldr summary -->` for non-rendered anchors

## Implementation

### VS Code
```json
{
  "todo-tree.regex.regex": ":A: (\\w+)"
}
```

### Git hooks
```bash
# Block commits with tmp code
if git diff --cached | grep -q ":A: temp"; then
  echo "Error: Remove :A: temp markers"
  exit 1
fi
```

### CI/CD
Check for critical issues in pull requests.


## Grammar

```ebnf
anchor  ::= ":A:" space payload
space   ::= " "  # exactly one ASCII space
payload ::= marker-list prose?
marker-list ::= marker (", " marker)*
marker  ::= bare | parameterized
bare    ::= "@"? [A-Za-z0-9_-]+
parameterized ::= bare "(" value ")"
value   ::= [^)]+  # any chars except closing paren
```

## Resources

- [README](https://github.com/galligan/grepa/blob/main/README.md): Full documentation
- [Examples](https://github.com/galligan/grepa/blob/main/docs/examples.md): Real-world patterns
- [Conventions](https://github.com/galligan/grepa/blob/main/docs/conventions/): Marker patterns
- [Progressive Guide](https://github.com/galligan/grepa/blob/main/docs/guides/progressive-enhancement.md): Adoption path

## Quick Reference

```bash
# Find all anchors
rg ":A:"

# Find with context
rg -C2 ":A: sec"         # 2 lines before/after
rg -B3 -A3 ":A: todo"     # 3 lines before, 3 after

# Find in markdown (including HTML comments)  
rg "<!-- :A:" --type md

# Remove all anchors (backup first!)
find . -type f -exec sed -i.bak 's/:A: [^*]*//g' {} +
```

Remember: The goal is discoverability. Start simple, grow naturally. 