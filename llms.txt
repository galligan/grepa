# Grepa (grep-anchor)

> Grepa provides a universal pattern (`:ga:`) that makes codebases AI-navigable and grep-friendly. Drop tiny, searchable markers in comments so AI agents and developers can instantly navigate to the right spot in any codebase.

## Core Concept

Grep-anchors are unique, searchable markers placed in code comments using the pattern `:ga:payload`. The default anchor is `:ga:` but teams can define custom anchors like `:proj:` or `:team:`. The payload consists of tags that classify the code location.

Key principles:
- **One anchor per project** - Maintain consistency across your codebase
- **Tags, not prose** - Use structured tags for reliable pattern matching
- **Keep tags terse** - Prefer `sec` over `security`, `ctx` over `context`
- **Progressive adoption** - Start with one tag, expand as needed
- **AI-first design** - Optimized for LLM navigation and understanding

## Essential Patterns

### Basic Usage
```javascript
// :ga:todo implement validation
// :ga:sec check user permissions
// :ga:ctx assumes UTC timestamps
// :ga:@agent write unit tests
// :ga:tmp remove after v2.0
```

### Combined Tags (use judiciously)
```python
# :ga:sec,todo validate inputs  # Good: related concerns, concise
# :ga:perf,debt refactor this loop   # Good: both about code quality
```

### Separate Comments (often better)
```python
# :ga:sec check SQL injection vulnerabilities
# :ga:todo add input validation for email format
# :ga:ctx user emails must be unique in database
# Better: each concern gets proper description
```

### Searching
```bash
rg ":ga:"              # All anchors
rg ":ga:sec"          # Security concerns
rg ":ga:@agent"        # AI tasks

# Context searching (find related tags)
rg -B1 -A1 ":ga:sec"      # Show 1 line before/after
rg -C2 ":ga:todo"          # Show 2 lines context
rg -B2 -A2 ":ga:sec" | rg ":ga:(sec|todo)"
```

## Tag Reference

**Core Tags:**
- `tldr` - Brief summary or overview ("Too Long; Didn't Read")
- `todo` - Work that needs doing
- `ctx` - Important context/assumptions
- `sec` - Security-critical code
- `@agent` - AI agent instructions
- `tmp` - Temporary code to remove

**Quality Tags:**
- `perf` - Performance concerns
- `bug` - Known issues
- `debt` - Technical debt
- `error` - Error handling needed
- `test` - Testing requirements

**Documentation:**
- `api` - Public interfaces
- `docs` - Documentation needed  
- `example` - Usage examples
- `business` - Business logic
- `tldr` - Brief summary (often in HTML comments)
- `core` - Core concepts
- `guide` - How-to guides
- `spec` - Specifications

**Management:**
- `issue(ID)` - Link to issue tracker
- `owner(@person)` - Assign responsibility
- `priority` - Priority level (p0, p1, etc.)
- `deadline(date)` - Time constraints

## Custom Anchors

While `:ga:` is recommended, teams can use custom patterns:
- Choose 2-4 character anchors: `:tc:`, `:proj:`
- Document in README
- One anchor per codebase
- For monorepos, use tags not different anchors

## AI Agent Workflows

### 1. Human marks location
```python
class UserService:
    # :ga:ctx all emails must be unique
    def create_user(self, email: str):
        # :ga:@agent implement with validation
        # :ga:sec prevent duplicates
        pass
```

### 2. AI finds work
```bash
rg ":ga:@agent"
# user_service.py:4: # :ga:@agent implement with validation
```

### 3. AI reads context
```bash
rg ":ga:ctx|:ga:sec" user_service.py
# user_service.py:2: # :ga:ctx all emails must be unique
# user_service.py:5: # :ga:sec prevent duplicates
```

### 4. AI implements with understanding

## Migration Strategies

### From TODO comments
```bash
# Phase 1: Enhance existing
sed -i 's/TODO:/TODO :ga:/g' **/*.js

# Phase 2: Pure anchors
sed -i 's/TODO :ga:/:ga:todo/g' **/*.js
```

### Progressive adoption
1. Start with `:ga:todo`
2. Add `:ga:ctx` for clarity
3. Use `:ga:@agent` for AI
4. Link with `:ga:issue(123)`

## Monorepo Patterns

Use tags for service namespacing:
```javascript
// :ga:auth,todo implement OAuth
// :ga:payment,sec validate amounts
// :ga:shared,api maintain compatibility
```

Search patterns:
```bash
rg ":ga:auth"          # Auth service only
rg ":ga:.*sec"        # All security issues
```

## Advanced Patterns

### JSON metadata (optional)
```javascript
// :ga:{"deadline":"2024-03-01","owner":"@alice"}
// :ga:{"epic":"user-auth","depends":["session"]}
```

### Arrays
```javascript
// :ga:["sec","performance","breaking"]
```

### Issue linking
```python
# :ga:issue(123,{"status":"in-progress"})
# :ga:jira(PROJ-456)
# :ga:github(#789)
```

### HTML Comments (for markdown)
```markdown
<!-- :ga:tldr Quick summary of the document -->
<!-- :ga:core Essential concept explanation -->
<!-- :ga:guide Step-by-step instructions -->
```

## Best Practices

1. **Separate concerns**: Use multiple comments for distinct topics
2. **Line limits**: Keep under ~80 chars for readable grep output
3. **Layer tags carefully**: `:ga:sec,todo` only when closely related
4. **Add context liberally**: More context is better, use separate lines
5. **Be specific**: "validate UUID" not just "validate"
6. **Link resources**: `:ga:docs(RFC-7231)`
7. **Stay consistent**: Document team patterns
8. **Use HTML comments in markdown**: `<!-- :ga:tldr summary -->` for non-rendered anchors

## Implementation

### VS Code
```json
{
  "todo-tree.regex.regex": ":ga:(\\w+)"
}
```

### Git hooks
```bash
# Block commits with tmp code
if git diff --cached | grep -q ":ga:tmp"; then
  echo "Error: Remove :ga:tmp markers"
  exit 1
fi
```

### CI/CD
Check for critical issues in pull requests.

### inventory tool
```bash
# Generate inventory of all anchors
scripts/inventory.py

# Ignore markdown files  
scripts/inventory.py --ignore md

# Ignore code examples in markdown
scripts/inventory.py --ignore-examples

# Use custom config
scripts/inventory.py --config myconfig.json
```

## Grammar

```ebnf
anchor  ::= ":" sigil ":" payload
sigil   ::= "ga" | custom
payload ::= token ("," token)*
token   ::= bare | json | array | function
bare    ::= "@"? [A-Za-z0-9_.-]+
```

## Resources

- [README](https://github.com/galligan/grepa/blob/main/README.md): Full documentation
- [Examples](https://github.com/galligan/grepa/blob/main/docs/examples.md): Real-world patterns
- [Custom Anchors](https://github.com/galligan/grepa/blob/main/docs/guides/custom-anchors.md): Define your own
- [Progressive Guide](https://github.com/galligan/grepa/blob/main/docs/guides/progressive-enhancement.md): Adoption path
- [Scripting](https://github.com/galligan/grepa/blob/main/docs/guides/scripting.md): Automation with inventory tool

## Quick Reference

```bash
# Find all anchors
rg ":ga:"

# Find with context
rg -C2 ":ga:sec"         # 2 lines before/after
rg -B3 -A3 ":ga:todo"     # 3 lines before, 3 after

# Find in markdown (including HTML comments)  
rg "<!-- :ga:" --type md

# Remove all anchors (backup first!)
find . -type f -exec sed -i.bak 's/:ga:[^*]*//g' {} +
```

Remember: The goal is discoverability. Start simple, grow naturally. 