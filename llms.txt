# Waymark

> Waymark provides a universal pattern (`:::`) that makes codebases AI-navigable and grep-friendly. Drop tiny, searchable waymarks in comments so AI agents and developers can instantly navigate to the right spot in any codebase.

## Core Concept

Waymarks are unique, searchable markers placed in code comments using the pattern `prefix ::: content`. The canonical waymark uses the `:::` sigil (three colons) preceded by a space when a prefix is present. Waymarks can contain prefixes, properties, notes, hashtags, and @mentions.

Key principles:
- **One sigil per project** - Maintain consistency with `:::` across your codebase
- **Visual clarity** - The `:::` sigil clearly separates prefix from content
- **Progressive adoption** - Start with simple prefixes, expand as needed
- **AI-first design** - Optimized for LLM navigation and understanding

## Essential Patterns

### Basic Usage
```javascript
// todo ::: implement validation
// warn ::: check user permissions #security
// ::: assumes UTC timestamps
// todo ::: @agent write unit tests
// temp ::: remove after v2.0
```

### With Properties and Hashtags
```python
# todo ::: priority:high validate inputs #security
# fix ::: @alice memory leak #critical
```

### Pure Notes (no prefix)
```python
# ::: all user emails must be unique in database
# ::: this code is performance-critical
# ::: deprecated:v2.0 use newMethod() instead
```

### Searching
```bash
rg ":::"              # All waymarks
rg "warn :::"         # Security/warning concerns
rg ":::.*@agent"      # AI tasks

# Context searching (find related waymarks)
rg -B1 -A1 "warn :::"      # Show 1 line before/after
rg -C2 "todo :::"          # Show 2 lines context
rg -B2 -A2 "fix :::"
```

## Prefix Reference

### Work Prefixes
- `todo` - work to be done
- `fix` - bugs to fix (synonym: `fixme`)
- `done` - completed work
- `ask` - questions needing answers
- `review` - needs review
- `needs` - dependencies (synonyms: `depends`, `requires`)
- `chore` - routine maintenance tasks
- `hotfix` - urgent production patch
- `spike` - exploratory proof-of-concept work

### Lifecycle/Maturity Prefixes
- `stub` - skeleton/basic implementation
- `draft` - work in progress (synonym: `wip`)
- `stable` - mature/solid code
- `shipped` - deployed to production
- `good` - approved (synonyms: `lgtm`, `approved`)
- `bad` - not approved
- `hold` - work intentionally paused
- `stale` - work that has stagnated
- `cleanup` - code cleanup needed
- `remove` - scheduled deletion

### Alerts/Warnings Prefixes
- `warn` - warning
- `crit` - critical issue (synonym: `critical`)
- `unsafe` - dangerous code
- `caution` - proceed carefully
- `broken` - non-functional code
- `locked` - do not modify (synonym: `freeze`)
- `deprecated` - scheduled for removal
- `audit` - requires audit review
- `legal` - legal obligations
- `temp` - temporary code (synonym: `temporary`)
- `revisit` - flag for future reconsideration

### Information Prefixes
- `tldr` - brief summary (one per file at top)
- `summary` - code section summary
- `note` - general note (synonym: `info`)
- `thought` - thinking out loud
- `docs` - documentation reference
- `why` - explains reasoning
- `see` - cross-reference (synonyms: `ref`, `xref`)
- `example` - usage example

### Meta Prefixes
- `important` - important information
- `hack` - hacky solution
- `flag` - generic marker
- `pin` - pinned item
- `idea` - future possibility
- `test` - test-specific marker

## Why `:::`?

The `:::` sigil was chosen for:
- **Visual clarity**: Clearly separates prefix from content
- **Uniqueness**: Unlikely to conflict with existing code
- **Consistency**: One standard across all projects
- **Searchability**: Easy to grep and parse

## AI Agent Workflows

### 1. Human marks location
```python
class UserService:
    # ::: all emails must be unique
    def create_user(self, email: str):
        # todo ::: @agent implement with validation
        # warn ::: prevent duplicates #security
        pass
```

### 2. AI finds work
```bash
rg ":::.*@agent"
# user_service.py:4: # todo ::: @agent implement with validation
```

### 3. AI reads context
```bash
rg ":::" user_service.py
# user_service.py:2: # ::: all emails must be unique
# user_service.py:5: # warn ::: prevent duplicates #security
```

### 4. AI implements with understanding

## Migration Strategies

### From TODO comments
```bash
# Phase 1: Enhance existing
sed -i 's/TODO:/TODO :::/g' **/*.js

# Phase 2: Pure waymarks
sed -i 's/TODO :::/todo :::/g' **/*.js
```

### Progressive adoption
1. Start with `todo :::`
2. Add `:::` for pure notes
3. Use `@mentions` for AI
4. Link with `fixes:#123`

## Monorepo Patterns

Use hashtags for service namespacing:
```javascript
// todo ::: implement OAuth #auth-service
// fix ::: validate amounts #payment #security
// note ::: maintain compatibility #shared-api
```

Search patterns:
```bash
rg "#auth-service"     # Auth service only
rg ":::.*#security"    # All security issues
```

## Advanced Patterns

### Properties
```javascript
// todo ::: fixes:#123 deadline:2024-03-01 implement auth
// todo ::: @alice priority:high fix memory leak
```

### Multiple Values
```javascript
// todo ::: requires:node(16,18,20) supports multiple versions
// fix ::: affects:auth,api,frontend security vulnerability
```

### Issue Linking
```python
# todo ::: fixes:#123 implement feature
# fix ::: closes:#456 security patch
# done ::: relates-to:AUTH-789 completed OAuth
```

### HTML Comments (for markdown)
```markdown
<!-- tldr ::: Quick summary of the document -->
<!-- todo ::: @galligan add more examples -->
<!-- note ::: Essential concept explanation -->
```

## Best Practices

1. **Space before `:::`**: Required when prefix is present
2. **Line limits**: Keep under ~80-120 chars for readable grep output
3. **Be specific**: Use properties for machine-readable data, notes for descriptions
4. **Use HTML comments in markdown**: `<!-- tldr ::: summary -->` for non-rendered waymarks
5. **Progressive enhancement**: Start simple, add complexity as needed

## Implementation

### VS Code
```json
{
  "todo-tree.regex.regex": "(\\w+) :::"
}
```

### Git hooks
```bash
# Block commits with temporary code
if git diff --cached | grep -q ".*:::.*\\(temp\\|tmp\\)"; then
  echo "Error: Remove temporary waymarks before committing"
  exit 1
fi
```

### CI/CD
Check for critical issues in pull requests.

## Grammar

```ebnf
waymark  ::= [prefix space] ":::" space content
prefix   ::= [A-Za-z0-9_-]+
space    ::= " "  # exactly one ASCII space
content  ::= (property | hashtag | mention | note)*
property ::= key ":" value ["(" params ")"]
hashtag  ::= "#" [A-Za-z0-9/_-]+
mention  ::= "@" [A-Za-z0-9_-]+
note     ::= [^#@:]+  # any text without special chars
```

## Resources

- [README](https://github.com/outfitter-dev/waymark/blob/main/README.md): Full documentation
- [Examples](https://github.com/outfitter-dev/waymark/blob/main/docs/examples.md): Real-world patterns
- [Conventions](https://github.com/outfitter-dev/waymark/blob/main/docs/conventions/): Prefix patterns
- [Progressive Guide](https://github.com/outfitter-dev/waymark/blob/main/docs/guides/progressive-enhancement.md): Adoption path

## Quick Reference

```bash
# Find all waymarks
rg ":::"

# Find with context
rg -C2 "warn :::"         # 2 lines before/after
rg -B3 -A3 "todo :::"     # 3 lines before, 3 after

# Find in markdown (including HTML comments)  
rg "<!-- .*:::" --type md

# Remove all waymarks (backup first!)
find . -type f -exec sed -i.bak 's/.*:::[^*]*//g' {} +
```

Remember: The goal is discoverability. Start simple, grow naturally. 