<!-- ARCHIVED: Legacy :M: syntax - See docs/conventions.md for current documentation -->
# Waymark Conventions
<!-- :M: tldr Essential patterns and best practices for waymarks -->
<!-- :M: core Standard waymark conventions for teams -->

Patterns and practices for making your codebase AI-navigable and human-friendly using waymarks.

## Quick Start

Begin with these five essential patterns:

1. `:M: todo` - Work that needs doing
2. `:M: ctx` - Important assumptions or constraints  
3. `:M: sec` - Security-critical code
4. `:M: @agent` - AI agent instructions
5. `:M: tmp` - Temporary code to remove

That's it! You can search all of these with `rg ":M:"`.

## Essential Patterns

### Work & Tasks

**`:M: todo`** - Work that needs to be done
```javascript
// :M: todo implement error handling
// :M: todo priority:high add authentication
```

**`:M: fix` / `:M: fixme`** - Broken code needing immediate attention
```python
# :M: fix null pointer exception here
# :M: fixme race condition in auth flow
```

**`:M: bug`** - Known bugs or issues
```go
// :M: bug race condition when concurrent requests
// :M: bug(severity:high) data loss possible
```

### Context & Documentation

**`:M: tldr`** - Brief summary or overview
```javascript
// :M: tldr validates user input and returns sanitized data
```

**`:M: ctx`** - Important context that isn't obvious
```python
# :M: ctx all timestamps are UTC
# :M: ctx user_ids are UUIDs, not integers
```

**`:M: docs`** - Documentation needed or important notes
```rust
// :M: docs explain rate limiting algorithm
// :M: docs add usage examples
```

### Security & Risk

**`:M: sec`** - Security-critical code
```go
// :M: sec validate all inputs before SQL query
// :M: sec ensure constant-time comparison
```

**`:M: warn`** - Potential issues or risky code
```python
# :M: warn this assumes sorted input
# :M: warn rate limit not enforced here
```

**`:M: critical`** - Critical code requiring extreme care
```javascript
// :M: critical payment processing - must be idempotent
```

### Quality & Maintenance

**`:M: perf`** - Performance-sensitive code
```ruby
# :M: perf N+1 query issue
# :M: perf consider caching this result
```

**`:M: debt`** - Technical debt that needs addressing
```java
// :M: debt tightly coupled to database
// :M: debt needs proper error handling
```

**`:M: tmp` / `:M: temp`** - Temporary code to remove
```javascript
// :M: tmp remove after Chrome 120 fix ships
// :M: temp workaround for Redis bug
```

## AI Agent Patterns

### Direct Delegation

```python
# Direct AI implementation
# :M: @agent implement pagination
# :M: @claude write comprehensive tests
# :M: @cursor optimize this function

# With specific instructions
# :M: @agent use async/await, not callbacks
# :M: @agent add TypeScript types throughout
```

### Providing Context for AI

```javascript
// :M: ctx uses Redux for state management
// :M: constraint no external dependencies
// :M: requirement must be backwards compatible
```

### Review Requests

```go
// :M: review, @ai security implications
// :M: audit check for memory leaks
```

## Team Workflows

### Task Management

**Priority Levels**
```javascript
// :M: priority:critical system down
// :M: priority:high major feature broken
// :M: priority:medium important bug
// :M: priority:low nice to have
```

**Assignment & Ownership**
```python
# :M: owner:@alice payment module
# :M: assign:@backend-team optimize query
# :M: reviewers:[@alice,@bob]
```

**Status Tracking**
```javascript
// :M: wip do not merge
// :M: blocked waiting on API update
// :M: ready for review
```

### Issue Integration

```javascript
// :M: issue(123) related ticket
// :M: jira(PROJ-456) parent epic
// :M: pr(789) implements this feature
```

## Best Practices

### 1. Waymarks Complement Documentation

Waymarks work alongside existing documentation:

```javascript
/**
 * Calculates the total price including tax
 * @param {number} price - Base price
 * @param {number} taxRate - Tax rate as decimal
 * @returns {number} Total price with tax
 * :M: todo add currency conversion support
 * :M: ctx assumes USD for now
 */
function calculateTotal(price, taxRate) {
  // :M: perf consider caching for repeated calculations
  return price * (1 + taxRate);
}
```

### 2. Keep It Searchable

```bash
# Find all waymarks
rg ":M:"

# Find specific patterns
rg ":M: todo"           # All todos
rg ":M: sec"            # Security issues
rg ":M:.*@alice"        # Alice's tasks
rg ":M:.*priority:high" # High priority items
```

### 3. Separate Concerns

Better to use multiple waymarks than cramming everything into one:

```javascript
// ❌ Too much in one waymark
// :M: sec,todo,perf,p0 validate inputs add caching check permissions

// ✅ Clear and searchable
// :M: sec validate all user inputs
// :M: todo add rate limiting
// :M: perf consider caching results
```

### 4. Be Consistent

Establish team conventions:
- Use consistent terminology (`tmp` vs `temp`)
- Agree on priority schemes (`p0/p1/p2` vs `critical/high/medium/low`)
- Document your patterns in a CONVENTIONS.md file

### 5. Start Simple

Begin with basic patterns and add complexity only when needed:

```text
Level 0: Try one pattern (:M: todo)
   ↓
Level 1: Add context (:M: ctx)
   ↓
Level 2: Delegate to AI (:M: @agent)
   ↓
Level 3: Link to issues (:M: issue(123))
   ↓
Level 4: Team-specific patterns
```

## Common Combinations

When contexts are closely related:

```javascript
// :M: sec, todo validate user input
// :M: perf, debt refactor this loop
// :M: tmp, issue(#123) workaround until fixed upstream
```

When contexts need separate descriptions:

```javascript
// :M: sec check for SQL injection
// :M: todo add input validation for email format
// :M: ctx emails must be unique in database
```

## Remember

The goal is **discoverability**, not perfection. Even one `:M:` waymark makes your codebase more navigable than none. Waymarks are breadcrumbs for both humans and AI.