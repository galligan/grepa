# Waymarks in Documentation
<!-- :M: tldr Waymarks complement JSDoc, docstrings, and other doc systems -->
<!-- :M: guide How waymarks enhance existing documentation -->

Waymarks enhance existing documentation comments with searchable markers, without replacing or interfering with standard practices.

## Core Principle

**Waymarks complement your existing documentation** - they're just searchable tags within comments:

- Documentation generators ignore waymarks
- Search tools find them easily across all languages
- Existing tooling continues working unchanged
- Progressive enhancement of current codebases

## Examples

### JavaScript with JSDoc

Waymarks add searchability to standard JSDoc:

```javascript
/**
 * Calculates the total price including tax
 * @param {number} price - Base price
 * @param {number} taxRate - Tax rate as decimal
 * @returns {number} Total price with tax
 * :M: todo add currency conversion support
 * :M: ctx assumes USD for now
 */
function calculateTotal(price, taxRate) {
  // :M: perf consider caching for repeated calculations
  return price + (price * taxRate);
}
```

### Python with Docstrings

```python
def process_payment(amount, currency="USD"):
    """
    Process a payment transaction
    
    Args:
        amount (float): Payment amount
        currency (str): Currency code
        
    Returns:
        dict: Transaction result
        
    :M: sec validate all payment data
    :M: todo add retry logic for failed payments
    """
    # :M: ctx payment gateway has 30s timeout
    # :M: business max transaction amount is $10,000
    return gateway.charge(amount, currency)
```

### TypeScript Interfaces

```typescript
interface User {
  /** @:M: api public interface - maintain compatibility */
  id: string;           // :M: ctx UUID v4 format
  email: string;        // :M: sec PII - handle carefully
  
  preferences: {
    theme: 'light' | 'dark';  // :M: feature dark mode support
    notifications: boolean;    // :M: todo implement notification system
  };
}
```

### Function Documentation

```typescript
// :M: sec validate all auth headers before processing
// :M: api primary entry point for HTTP auth
function authenticateRequest(request: Request): AuthResult {
    // :M: ctx assumes Authorization header format: "Bearer <token>"
    // :M: perf cache token validation results
    
    const token = extractToken(request);
    return validateToken(token);
}
```

### Rust Documentation

```rust
/// :M: api public trait for auth providers
/// :M: sec ensure constant-time comparison for tokens
pub trait AuthProvider {
    /// :M: todo add token refresh support
    fn validate_token(&self, token: &str) -> Result<Claims, AuthError>;
}
```

## Search Examples

```bash
# Find all waymarks
rg ":M:"

# Security-related waymarks
rg ":M: sec"

# AI agent tasks in JavaScript
rg ":M: @agent" --type js

# Find in documentation comments (multiline search)
rg -U "(?:\/\*\*|\"\"\"|\#\#)[\s\S]*?:M: todo"
```

## Documentation Integration

### JSDoc Example

```javascript
/**
 * @fileoverview Authentication utilities
 * :M: todo validate parameter range
 * :M: sec sanitize user input
 */

/**
 * Calculates risk score for transaction
 * @param {number} amount - Transaction amount
 * @returns {number} Risk score 0-1
 */
function calculateRisk(amount) {
    // :M: business risk tolerance is 0.05
    // :M: perf cache calculation results
    return Math.min(amount / 10000, 1.0);
}
```

### Documentation Standards

Common patterns that work with documentation generators:

- :M: todo - work items
- :M: sec - security concerns  
- :M: api - public interfaces
- :M: ctx - important context

### Comprehensive API Documentation

```javascript
/**
 * @namespace PaymentAPI
 * :M: api public REST endpoint
 * :M: sec verify caller permissions
 */
class PaymentProcessor {
  // :M: test missing edge cases
  // :M: ctx mock external payment gateway
  processTransaction(data) {
    // :M: todo test with different currencies
    return this.gateway.charge(data);
  }
}
```

### Configuration Files

```yaml
# :M: config production values
# :M: sec use environment variables for passwords
database:
  host: localhost
  # :M: perf connection pool tuning
  pool_size: 20
```

## Migration from Plain Comments

```bash
# Find TODO comments without waymarks
rg "TODO(?!.*:M:)" --type js

# Convert to waymarks
# TODO :M: todo implement caching
```

## Benefits

- **Searchable**: Find anything with `rg ":M:"`
- **Tool-agnostic**: Works with any documentation system
- **Language-agnostic**: Same pattern across all files
- **Non-invasive**: Doesn't break existing tools
- **Progressive**: Add gradually to existing codebases

Start with one waymark today. Add `:M: todo` to your next TODO comment and see how it improves discoverability.