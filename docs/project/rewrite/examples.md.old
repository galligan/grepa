<!-- ARCHIVED: Legacy :M: syntax - See docs/examples.md for current documentation -->
# Waymark Examples
<!-- :M: tldr Practical waymark patterns organized by use case -->
<!-- :M: example Real-world usage patterns for developers and AI agents -->

Examples and patterns for working with waymarks, organized by common use cases.

## Todo Patterns

### Basic Task Management

```javascript
// Simple todos
// :M: todo implement validation
// :M: fix handle edge case
// :M: bug memory leak in auth service

// With priority and assignment
// :M: todo priority:high implement OAuth
// :M: todo(assign:@alice) add unit tests
// :M: bug(severity:critical) fix race condition
```

### AI Agent Tasks

```python
# Direct AI implementation
# :M: @agent implement pagination
# :M: @claude write comprehensive tests
# :M: @cursor optimize this function

# AI with specific instructions
# :M: @agent use async/await, not callbacks
# :M: @agent implement with proper error handling
# :M: @agent add TypeScript types throughout
```

### Complex Workflows

```typescript
// Task with full context
// :M: todo implement rate limiting
// :M: ctx max 100 requests per minute per user
// :M: depends(redis) use Redis for distributed counting
// :M: deadline:2024-03-15

// Blocked tasks
// :M: todo add payment processing
// :M: blocked(issue:AUTH-123) waiting on auth service
// :M: owner:@payments-team
```

## Development Patterns

### Working with Documentation Comments

Waymarks complement existing documentation systems - they add searchability without replacing standard practices.

```javascript
/**
 * Calculates the total price including tax
 * @param {number} price - Base price
 * @param {number} taxRate - Tax rate as decimal
 * @returns {number} Total price with tax
 * :M: todo add currency conversion support
 * :M: ctx assumes USD for now
 */
function calculateTotal(price, taxRate) {
  // :M: perf consider caching for repeated calculations
  return price * (1 + taxRate);
}
```

```python
def process_order(order_data: dict) -> Order:
    """
    Process a customer order through the payment system.
    
    Args:
        order_data: Dictionary containing order details
        
    Returns:
        Processed Order object
        
    Raises:
        ValidationError: If order data is invalid
        PaymentError: If payment processing fails
    
    :M: sec validate all payment data
    :M: todo add retry logic for failed payments
    """
    # :M: ctx payment gateway has 30s timeout
    # :M: business max transaction amount is $10,000
    pass
```

```java
/**
 * User authentication service
 * 
 * Handles login, logout, and session management
 * 
 * @since 1.0
 * @author Team Auth
 * 
 * :M: security critical component
 * :M: review check OWASP compliance
 */
public class AuthService {
    /**
     * Validates user credentials
     * 
     * @param username User's username
     * @param password User's password
     * @return Authentication token if valid
     * 
     * :M: todo implement rate limiting
     * :M: sec never log passwords
     */
    public String authenticate(String username, String password) {
        // :M: ctx passwords are bcrypt hashed
        // :M: audit log all auth attempts
    }
}
```

### Type Definitions and Interfaces

```typescript
/**
 * User profile data structure
 * :M: api public interface - maintain compatibility
 */
interface UserProfile {
  id: string;           // :M: ctx UUID v4 format
  email: string;        // :M: sec PII - handle carefully
  preferences: {
    theme: 'light' | 'dark';  // :M: feature dark mode support
    notifications: boolean;    // :M: todo implement notification system
  };
  createdAt: Date;      // :M: ctx stored as UTC
}

// :M: deprecated use UserProfile instead
interface LegacyUser {
  userId: number;       // :M: migration convert to UUID
}
```

### Test Patterns

```javascript
describe('PaymentProcessor', () => {
  // :M: test needs more edge cases
  // :M: ctx mock external payment gateway
  
  it('should handle successful payments', () => {
    // :M: todo test with different currencies
    // :M: @agent add assertion for audit log
  });
  
  it('should retry failed payments', () => {
    // :M: test verify exponential backoff
    // :M: ctx max 3 retries
  });
  
  // :M: test missing: concurrent payment handling
  // :M: test missing: partial payment scenarios
});
```

## Metadata Patterns

### Configuration and Environment

```yaml
# config/production.yml
database:
  host: prod-db.example.com  # :M: sec use environment variable
  port: 5432
  pool_size: 20             # :M: perf tuned for high load
  
cache:
  provider: redis           # :M: ctx Redis 6.2+ required
  ttl: 3600                # :M: config 1 hour cache
  
# :M: todo add monitoring configuration
# :M: review verify production settings
```

### Version and Lifecycle

```javascript
// :M: since:v2.0 new API endpoint
// :M: deprecated:v3.0 use /api/v3/users instead
// :M: until:v4.0 will be removed
router.get('/api/v2/users', (req, res) => {
  // :M: breaking returns different format than v1
  // :M: migration guide at docs/migration-v2.md
});

// Feature flags
// :M: feature new-checkout-flow
// :M: experiment 10% rollout
if (features.isEnabled('new-checkout-flow', user)) {
  // :M: metrics track conversion rate
  return newCheckoutProcess();
}
```

### Issue Tracking Integration

```python
# :M: issue(BUG-1234) intermittent timeout
# :M: jira(PROJ-456) parent epic
# :M: pr(789) implements this feature
def sync_user_data():
    # :M: owner:@data-team
    # :M: sprint:2024-Q1
    pass
```

## Security Patterns

```javascript
// Input validation
function updateProfile(userId, data) {
  // :M: sec validate all user inputs
  // :M: ctx prevent SQL injection
  // :M: todo add rate limiting
  
  // :M: sec check user owns this profile
  if (!userOwnsProfile(userId, profileId)) {
    // :M: audit log unauthorized access attempt
    throw new ForbiddenError();
  }
}

// Sensitive data handling
// :M: sec PII data - encrypt at rest
// :M: compliance GDPR requirements
class UserDataStore {
  // :M: sec never log sensitive fields
  // :M: audit all data access
}
```

## Performance Patterns

```ruby
# :M: perf N+1 query detected
# :M: todo use includes or join
def get_posts_with_stats
  posts = Post.all
  
  posts.map do |post|
    {
      title: post.title,
      # :M: perf this hits DB for each post
      comment_count: post.comments.count
    }
  end
end

# :M: cache expensive calculation
# :M: ctx called on every request
# :M: todo add Redis caching with TTL
def calculate_recommendations(user)
  # :M: perf consider background job
  # :M: metrics track execution time
end
```

## Search Examples

### Finding Work
```bash
# All todos
rg ":M: todo"

# High priority items
rg ":M:.*priority:high"

# AI agent tasks
rg ":M: @agent"

# Bugs by severity
rg ":M:.*bug.*severity:critical"
```

### Finding Context
```bash
# All contextual information
rg ":M: ctx"

# Security considerations
rg ":M: sec" -A 2 -B 2

# Performance issues
rg ":M: perf"

# Business rules
rg ":M: business"
```

### Advanced Searches
```bash
# Tasks assigned to specific person
rg ":M:.*@alice"

# Deprecated code with timelines
rg ":M:.*deprecated.*until:"

# Temporary code to remove
rg ":M: temp|:M: tmp"

# Find all blockers
rg ":M:.*blocked" -A 1
```

## Best Practices

1. **Waymarks complement, not replace**: Use alongside JSDoc, docstrings, and comments
   ```javascript
   /**
    * Standard JSDoc remains unchanged
    * :M: todo enhance with better examples
    */
   ```

2. **Keep related markers together**: Group waymarks that describe the same concern
   ```python
   # :M: sec validate inputs
   # :M: sec check permissions  
   # :M: ctx admin users bypass some checks
   ```

3. **Be specific with AI instructions**: Clear context helps AI agents
   ```javascript
   // :M: @agent implement using React hooks
   // :M: @agent include error boundaries
   // :M: ctx must support React 16.8+
   ```

4. **Use consistent patterns**: Establish team conventions
   ```ruby
   # Team patterns:
   # :M: ship ready for production
   # :M: hold needs review first
   # :M: risk proceed with caution
   ```

Remember: Waymarks make codebases more navigable. They're breadcrumbs for both humans and AI.